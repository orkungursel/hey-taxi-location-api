// Code generated by MockGen. DO NOT EDIT.
// Source: location_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/orkungursel/hey-taxi-location-api/internal/domain/model"
)

// MockLocationRepository is a mock of LocationRepository interface.
type MockLocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLocationRepositoryMockRecorder
}

// MockLocationRepositoryMockRecorder is the mock recorder for MockLocationRepository.
type MockLocationRepositoryMockRecorder struct {
	mock *MockLocationRepository
}

// NewMockLocationRepository creates a new mock instance.
func NewMockLocationRepository(ctrl *gomock.Controller) *MockLocationRepository {
	mock := &MockLocationRepository{ctrl: ctrl}
	mock.recorder = &MockLocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepository) EXPECT() *MockLocationRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockLocationRepository) Save(ctx context.Context, location model.Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockLocationRepositoryMockRecorder) Save(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLocationRepository)(nil).Save), ctx, location)
}

// Search mocks base method.
func (m *MockLocationRepository) Search(ctx context.Context, lat, lng, radius float64, unit string, limit int) ([]model.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, lat, lng, radius, unit, limit)
	ret0, _ := ret[0].([]model.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockLocationRepositoryMockRecorder) Search(ctx, lat, lng, radius, unit, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockLocationRepository)(nil).Search), ctx, lat, lng, radius, unit, limit)
}
