// Code generated by MockGen. DO NOT EDIT.
// Source: token_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	app "github.com/orkungursel/hey-taxi-location-api/internal/app"
)

// MockClaims is a mock of Claims interface.
type MockClaims struct {
	ctrl     *gomock.Controller
	recorder *MockClaimsMockRecorder
}

// MockClaimsMockRecorder is the mock recorder for MockClaims.
type MockClaimsMockRecorder struct {
	mock *MockClaims
}

// NewMockClaims creates a new mock instance.
func NewMockClaims(ctrl *gomock.Controller) *MockClaims {
	mock := &MockClaims{ctrl: ctrl}
	mock.recorder = &MockClaimsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaims) EXPECT() *MockClaimsMockRecorder {
	return m.recorder
}

// GetIssuer mocks base method.
func (m *MockClaims) GetIssuer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockClaimsMockRecorder) GetIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockClaims)(nil).GetIssuer))
}

// GetRole mocks base method.
func (m *MockClaims) GetRole() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRole indicates an expected call of GetRole.
func (mr *MockClaimsMockRecorder) GetRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockClaims)(nil).GetRole))
}

// GetSubject mocks base method.
func (m *MockClaims) GetSubject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockClaimsMockRecorder) GetSubject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockClaims)(nil).GetSubject))
}

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockTokenService) ParseToken(ctx context.Context, token string) (app.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, token)
	ret0, _ := ret[0].(app.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockTokenServiceMockRecorder) ParseToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockTokenService)(nil).ParseToken), ctx, token)
}

// ValidateAccessTokenFromRequest mocks base method.
func (m *MockTokenService) ValidateAccessTokenFromRequest(ctx context.Context, r *http.Request) (app.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessTokenFromRequest", ctx, r)
	ret0, _ := ret[0].(app.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAccessTokenFromRequest indicates an expected call of ValidateAccessTokenFromRequest.
func (mr *MockTokenServiceMockRecorder) ValidateAccessTokenFromRequest(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessTokenFromRequest", reflect.TypeOf((*MockTokenService)(nil).ValidateAccessTokenFromRequest), ctx, r)
}
